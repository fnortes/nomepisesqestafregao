// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider      = "cockroachdb"
  url           = env("DATABASE_URL")
  relationMode  = "prisma"
}

model YearWork {
  id                      String      @id @default(uuid())
  year                    String      @unique
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  newClientPrice          Float       @default(20)
  previousAdults          Int         @default(0)
  previousChilds          Int         @default(0)
  firstPartyDay           DateTime    @default(now())
  lastPartyDay            DateTime    @default(now())
  previousFirstPartyDay   DateTime?
  previousLastPartyDay    DateTime?
  unitFoodPrice           Float       @default(10)
  previousYearWorkAmount  Float       @default(0)                   // TODO: Por ahora lo dejamos a cero, pero en el futuro, este valor se podría auto-rellenar cuando se crea un nuevo año, tomandolo del saldo del año anterior.
  awardsReward            Float       @default(0)
  commissionHelp          Float       @default(0)
  clients                 Client[]    @relation("YearWorkToClient") // TODO: Está implentado el copiar los clientes del año anterior, cuando se selecciona, pero falta validar que los copia bien y con todos los datos.
  barGroups               BarGroup[]  @relation("YearWorkToBarGroup")
  priceTypes              PriceType[] @relation("YearWorkToPriceType")
}

enum Gender {
  MAN
  WOMAN
}

enum AgeGroup {
  ADULT
  CHILD
  BABY
}

enum ShirtSize {
  S
  M
  L
  XL
  XXL
  XXXL
  M_6
  A_2
  A_3_4
  A_6
  A_8
  A_12
  A_16
}

model BarGroup {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String    @unique
  yearWorkId    String
  yearWork      YearWork  @relation("YearWorkToBarGroup", fields: [yearWorkId], references: [id])
  clients       ClientsOnBarGroups[]

  @@index([yearWorkId])
}

model PriceType {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  adultPrice    Float     @default(0)
  childPrice    Float     @default(0)
  babyPrice     Float     @default(0)
  meals         Boolean   @default(false)
  dinners       Boolean   @default(false)
  paradeSuit    Boolean   @default(false)
  paradeWater   Boolean   @default(false)
  drinkTickets  Boolean   @default(false)
  yearWorkId    String
  yearWork      YearWork  @relation("YearWorkToPriceType", fields: [yearWorkId], references: [id])
  clients       Client[]  @relation("PriceTypeToClient")

  @@index([yearWorkId])
}

model Client {
  id            String      @id @default(uuid())
  yearWorkId    String
  yearWork      YearWork    @relation("YearWorkToClient", fields: [yearWorkId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  firstName     String
  lastName      String?
  email         String      @unique
  phone         String?
  gender        Gender      @default(MAN)
  ageGroup      AgeGroup    @default(ADULT)
  isNew         Boolean     @default(false)
  barGroups     ClientsOnBarGroups[]
  priceTypeId   String
  priceType     PriceType   @relation("PriceTypeToClient", fields: [priceTypeId], references: [id])
  shirtSize     ShirtSize?  
  quotaPaid     Float       @default(0)
  comments      String?

  @@index([yearWorkId])
  @@index([priceTypeId])
}

model ClientsOnBarGroups {
  barGroupId    String
  barGroup      BarGroup   @relation(fields: [barGroupId], references: [id])
  clientId      String
  client        Client @relation(fields: [clientId], references: [id])
  startDate     DateTime @default(now())
  endDate       DateTime @default(now())

  @@id([barGroupId, clientId])
  @@index([barGroupId])
  @@index([clientId])
}