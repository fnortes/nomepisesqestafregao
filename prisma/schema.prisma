// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider      = "cockroachdb"
  url           = env("DATABASE_URL")
  relationMode  = "prisma"
}

model YearWork {
  id                      String      @id @default(uuid())
  year                    String      @unique
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  newClientPrice          Float       @default(20)
  previousAdults          Int         @default(0)
  previousChilds          Int         @default(0)
  previousTeens           Int         @default(0)
  firstPartyDay            DateTime    @default(now())
  lastPartyDay            DateTime    @default(now())
  unitFoodPrice           Float       @default(10)
  previousYearWorkAmount  Float       @default(0)
  awardsReward            Float       @default(0)
  commissionHelp          Float       @default(0)
  clients                 Client[]    @relation("YearWorkToClient")
  barGroups               BarGroup[]  @relation("YearWorkToBarGroup")
  priceTypes              PriceType[] @relation("YearWorkToPriceType")
  expenses                Expense[]   @relation("YearWorkToExpense")
  foods                   Food[]      @relation("YearWorkToFood")
  suits                   Suit[]      @relation("YearWorkToSuit")
  sales                   Sale[]      @relation("YearWorkToSale")
}

enum Gender {
  MAN
  WOMAN
}

enum AgeGroup {
  ADULT
  TEEN
  TEEN_HALF_PORTION
  CHILD
  CHILD_HALF_PORTION
  BABY
}

enum ShirtSize {
  S
  M
  L
  XL
  XXL
  XXXL
  M_6
  A_2
  A_3_4
  A_6
  A_8
  A_9
  A_12
  A_16
}

model BarGroup {
  id            String                @id @default(uuid())
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  name          String                
  yearWorkId    String
  yearWork      YearWork              @relation("YearWorkToBarGroup", fields: [yearWorkId], references: [id])
  clients       ClientsOnBarGroups[]
  turns         Turn[]                @relation("BarGroupToTurn")

  @@index([yearWorkId])
}

model Turn {
  id            String                @id @default(uuid())
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  startDate     DateTime              @default(now())
  endDate       DateTime              @default(now())
  barGroupId    String
  barGroup      BarGroup              @relation("BarGroupToTurn", fields: [barGroupId], references: [id])

  @@index([barGroupId])
}

model PriceType {
  id                      String    @id @default(uuid())
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  name                    String
  adultPrice              Float     @default(0)
  teenPrice               Float     @default(0)
  teenHalfPortionPrice    Float     @default(0)
  childPrice              Float     @default(0)
  childHalfPortionPrice   Float     @default(0)
  babyPrice               Float     @default(0)
  meals                   Boolean   @default(false)
  dinners                 Boolean   @default(false)
  paradeSuit              Boolean   @default(false)
  paradeWater             Boolean   @default(false)
  drinkTickets            Boolean   @default(false)
  yearWorkId              String
  yearWork                YearWork  @relation("YearWorkToPriceType", fields: [yearWorkId], references: [id])
  clients                 Client[]  @relation("PriceTypeToClient")

  @@index([yearWorkId])
}

model Client {
  id                     String                @id @default(uuid())
  yearWorkId             String
  yearWork               YearWork              @relation("YearWorkToClient", fields: [yearWorkId], references: [id])
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  firstName               String
  lastName               String?
  email                  String?     
  phone                  String?
  gender                 Gender                @default(MAN)
  ageGroup               AgeGroup              @default(ADULT)
  suitGroup              SuitGroup             @default(GROUP_1)
  isNew                  Boolean               @default(false)
  barGroups              ClientsOnBarGroups[]
  foods                  ClientsOnFoods[]
  priceTypeId            String
  priceType              PriceType             @relation("PriceTypeToClient", fields: [priceTypeId], references: [id])
  shirtSize              ShirtSize?  
  quotaModifier           Float                 @default(0)
  quotaPaid              Float                 @default(0)
  comments               String?
  allergiesComments      String?

  @@index([yearWorkId])
  @@index([priceTypeId])
}

model ClientsOnBarGroups {
  barGroupId    String
  barGroup      BarGroup  @relation(fields: [barGroupId], references: [id], onDelete: Cascade)
  clientId      String
  client        Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@id([barGroupId, clientId])
  @@index([barGroupId])
  @@index([clientId])
}

enum ExpenseFamily {
  SHIRTS
  DECORATION
  TOOLS
  ICE_CUBES
  FLOWER_OFFERING
  MUSIC
  VEHICLES
  EXTRA_EXPENSES
  PLASTIC
  TABLES_AND_CHAIRS
  FOODS
  SUITS
  DRINK
}

model ExpenseCategory {
  id                            String        @id @default(uuid())
  createdAt                     DateTime      @default(now())
  updatedAt                     DateTime      @updatedAt
  family                        ExpenseFamily
  name                          String
  previousYearWorkUnitsConsumed Int           @default(0)
  comments                      String?

  expenses                      Expense[]     @relation("ExpenseCategoryToExpense")
}

model Expense {
  id                        String          @id @default(uuid())
  yearWorkId                String
  yearWork                  YearWork        @relation("YearWorkToExpense", fields: [yearWorkId], references: [id])
  expenseCategoryId         String
  expenseCategory           ExpenseCategory @relation("ExpenseCategoryToExpense", fields: [expenseCategoryId], references: [id])
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  title                     String
  comments                  String?
  description               String?
  previousYearWorkUnits     Int             @default(1)
  estimatedUnits            Int             @default(1)
  units                     Int             @default(1)
  unitPrice                 Float           @default(0)
  total                     Float           @default(0)
  paid                      Float           @default(0)

  @@index([yearWorkId])
  @@index([expenseCategoryId])
}

model Food {
  id             String             @id @default(uuid())
  yearWorkId     String
  yearWork       YearWork           @relation("YearWorkToFood", fields: [yearWorkId], references: [id])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  title          String
  comments       String?
  description    String?
  date           DateTime           @default(now())
  price          Float              @default(0)
  paid           Float              @default(0)
  clients        ClientsOnFoods[]

  @@index([yearWorkId])
}

model ClientsOnFoods {
  foodId        String
  food          Food      @relation(fields: [foodId], references: [id], onDelete: Cascade)
  clientId      String
  client        Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  quantity      Float       @default(0)
  attend        Boolean   @default(true)

  @@id([foodId, clientId])
  @@index([foodId])
  @@index([clientId])
}

enum SuitGroup {
  GROUP_1
  GROUP_2
  GROUP_3
}

model Suit {
  id             String             @id @default(uuid())
  yearWorkId     String
  yearWork       YearWork           @relation("YearWorkToSuit", fields: [yearWorkId], references: [id])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  ageGroup       AgeGroup           @default(ADULT)
  suitGroup      SuitGroup          @default(GROUP_1)
  gender         Gender             @default(MAN)
  comments       String?
  units          Int                @default(1)
  unitPrice      Float              @default(0)
  total          Float              @default(0)
  paid           Float              @default(0)


  
  @@index([yearWorkId])
}

model SaleCategory {
  id             String     @id @default(uuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String
  comments       String?

  sales          Sale[]     @relation("SaleCategoryToSale")
}

model Sale {
  id                        String          @id @default(uuid())
  yearWorkId                String
  yearWork                  YearWork        @relation("YearWorkToSale", fields: [yearWorkId], references: [id])
  saleCategoryId            String
  saleCategory              SaleCategory    @relation("SaleCategoryToSale", fields: [saleCategoryId], references: [id])
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  date                      DateTime        @default(now())
  title                     String
  comments                  String?
  initialAmount             Float           @default(0)
  finallyAmount              Float           @default(0)
  benefitAmount              Float           @default(0)

  @@index([yearWorkId])
  @@index([saleCategoryId])
}